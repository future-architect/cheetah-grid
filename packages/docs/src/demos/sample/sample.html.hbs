---
category: Introduction
title: What it is
layout: demo.hbs
order: -100
---

{{#marked}}
# What it is

{{#if lang_ja}}
Cheetah Gridは、Canvasで実現する、ハイパフォーマンスなJavaScriptグリッドコンポーネントです。
{{else}}
Cheetah Grid is a high performance JavaScript data table component that works on canvas
{{/if}}

# Show **1,000,000** records without stress

{{#if lang_ja}}
100万レコードのデータを一瞬で表示できます。
{{/if}}

---
{{/marked}}

<script type="text/javascript">

//{{{babel textContents.demos.[demos/init.parts.js]}}}
</script>

<label>Grid initial processing time : </label><strong id="time"></strong>
<br>
<br>
<label>theme</label>
<select id="theme">
    <option value="default" selected="true">default</option>
</select>
<div id="sample" class="demo-grid large">
</div>
<script type="text/javascript">
/*eslint no-alert:0*/

//{{#wrapscript}}
//{{#copy "script1"}}
/*global cheetahGrid,generatePersonsDataSource*/
const personsDataSource = generatePersonsDataSource(1000000);

const startTime = new Date();

const grid = new cheetahGrid.ListGrid({
	parentElement: document.querySelector('#sample'),
	header: [
		{field: 'check', caption: '', width: 50, columnType: 'check', action: 'check'},
		{field: 'personid', caption: 'ID', width: 100, columnType: 'center'},
		{ /* multiple header */
			caption: 'name',
			columns: [
				{field: 'fname', caption: 'First Name', width: 200},
				{field: 'lname', caption: 'Last Name', width: 200},
			],
		},
		{field: 'email', caption: 'Email', width: 250},
		{
			/* callback field */
			field(rec) {
				const d = rec.birthday;
				return `${d.getFullYear()}/${d.getMonth() + 1}/${d.getDate()}`;
			},
			caption: 'birthday',
			width: 100
		},
		{
			caption: 'button',
			width: 120,
			/* button column */
			columnType: new cheetahGrid.columns.type.ButtonColumn({
				caption: 'SHOW REC',
			}),
			action: new cheetahGrid.columns.action.ButtonAction({
				action(rec) {
					alert(JSON.stringify(rec));
				},
			}),
		}
	],
	frozenColCount: 2,
});
grid.dataSource = personsDataSource;

const endTime = new Date();

document.getElementById('time').textContent = `${endTime - startTime}ms`;
//{{/copy}}
window.grid = grid;

const themeSelect = document.querySelector('#theme');
themeSelect.onchange = function() {
	if (themeSelect.value === 'default') {
		grid.theme = null;
	} else {
		grid.theme = themeSelect.value;
	}
	console.log(themeSelect.value);
};
for (const name in cheetahGrid.themes.choices) {
	const opt = document.createElement('option');
	opt.value = name;
	opt.textContent = name;
	themeSelect.appendChild(opt);
}
//{{/wrapscript}}
</script>
{{> code class="js" code=script1}}

{{#marked}}
---

# A simple example

{{#if lang_ja}}
シンプルな Cheetah Grid の生成は非常に簡単です。
{{/if}}

---
{{/marked}}

<label>record count : </label><input id="input2" type="number" value="100" style="text-align: right;" /><button id="reload">RELOAD</button><br>
<span id="log2"></span>
<label>Grid initial processing time : </label><strong id="time2"></strong>
<div id="sample2" class="demo-grid middle">
</div>
<script type="text/javascript">
/*eslint no-alert:0*/

//Use Promise
//{{#wrapscript}}
/*global cheetahGrid,generatePersons*/
const logEl = document.querySelector('#log2');
const baseRecords = [];
function generatePersonRecords(count) {
	const addCount = count - baseRecords.length;
	if (addCount > 1000000) {
		if (!window.confirm(`Construction of the array may take time. Is it OK?
record count: ${count}`)) {
			return Promise.resolve();
		}
	}
	if (addCount < 0) {
		return Promise.resolve(baseRecords.slice(0, count));
	}
	function gen() {
		return new Promise((resolve) => {
			setTimeout(() => {
				generatePersons(10000, baseRecords.length + 1).forEach((r) => baseRecords.push(r));
				resolve();
			}, 0);
		});
	}
	function recursive() {
		return gen().then(() => {
			if (baseRecords.length > count) {
				logEl.innerHTML = '';
				return baseRecords.slice(0, count);
			} else {
				if (count >= 100000) {
					logEl.innerHTML = `generated : ${baseRecords.length}<br>`;
				}
				return gen().then(recursive);
			}
		});
	}
	return recursive();
}
let grid;
function reload() {
	generatePersonRecords(document.querySelector('#input2').value - 0).then((records) => {
		if (!records) {
			return;
		}
		const startTime = new Date();

		if (grid) {
			grid.dispose();
		}

		//{{#copy "script2"}}
		// initialize
		grid = new cheetahGrid.ListGrid({
			// Parent element on which to place the grid
			parentElement: document.querySelector('#sample2'),
			// Header definition
			header: [
				{field: 'check', caption: '', width: 50, columnType: 'check', action: 'check'},
				{field: 'personid', caption: 'ID', width: 100, columnType: 'center'},
				{field: 'fname', caption: 'First Name', width: 200},
				{field: 'lname', caption: 'Last Name', width: 200},
				{field: 'email', caption: 'Email', width: 250},
			],
			// Array data to be displayed on the grid
			records,
			// Column fixed position
			frozenColCount: 2,
		});
		//{{/copy}}


		const endTime = new Date();

		document.getElementById('time2').textContent = `${endTime - startTime}ms`;
	});
}
document.querySelector('#reload').onclick = reload;
reload();
//{{/wrapscript}}
</script>
{{> code class="js" code=script2}}
