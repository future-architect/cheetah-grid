---
category:
    - Usage
    - Column Actions
    - Classes
title: SmallDialogInputEditor
layout: demo.hbs
order: 400
docVersion: 0.2.0
css: >
    .al-right input {
    	text-align: right;
    }
---

{{#marked}}
## SmallDialogInputEditor

{{#if lang_ja}}
入力によるデータ編集を可能にします。  

列の`action`に`SmallDialogInputEditor`クラスのインスタンスを利用すると、`readOnly`・`disabled`プロパティの制御を動的に行うことができますが、  
文字列`'input'`と定義した場合は、`readOnly`・`disabled`プロパティを制御出来ません。  
{{else}}
Enables data editing by input.

You can dynamically control the `readOnly` and `disabled` property by defining an instance of the `SmallDialogInputEditor` class to the `action` column.
If defined with the string `'input'`, you can not control `readOnly` and `disabled` property.
{{/if}}
{{/marked}}

<div id="sample1" class="demo-grid small">
</div>

<label>change action properties : </label>
<select id="sample1mode">
    <option value="" selected="true">both false</option>
    <option value="readOnly">readOnly = true</option>
    <option value="disabled">disabled = true</option>
</select> <span id="sample1modememo"></span>

<script type="text/javascript">
/*eslint no-alert:0*/
//{{#wrapscript}}
//{{#copy "sample1"}}
/*global cheetahGrid*/

const inputEditor = new cheetahGrid.columns.action.SmallDialogInputEditor();
const grid = new cheetahGrid.ListGrid({
	parentElement: document.querySelector('#sample1'),
	header: [

		{field: 'text1', caption: 'defined by string', width: 220, action: 'input'},

		//
		{field: 'text2', caption: 'defined by class instance', width: 220, action: inputEditor},

		{
			caption: 'show',
			width: 100,
			columnType: new cheetahGrid.columns.type.ButtonColumn({
				caption: 'SHOW',
			}),
			action: new cheetahGrid.columns.action.ButtonAction({
				action(rec) {
					alert(JSON.stringify(rec, null, '  '));
				},
			}),
		}


	],
});
grid.records = [
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
	{text1: 'text', text2: 'text'},
];

document.querySelector('#sample1mode').onchange = function() {
	//change action properties
	if (this.value === 'readOnly') {
		inputEditor.readOnly = true;
		inputEditor.disabled = false;
		document.querySelector('#sample1modememo').textContent = 'It will not toggle';
	} else if (this.value === 'disabled') {
		inputEditor.readOnly = false;
		inputEditor.disabled = true;
		document.querySelector('#sample1modememo').textContent = 'It will not toggle and does not respond when hovering the mouse';
	} else {
		inputEditor.readOnly = false;
		inputEditor.disabled = false;
		document.querySelector('#sample1modememo').textContent = 'both false';
	}
};
//{{/copy}}
//{{/wrapscript}}
</script>
{{> code class="js" code=sample1}}


{{#marked}}
{{#if lang_ja}}
### プロパティ
`SmallDialogInputEditor`のコンストラクタ引数で以下プロパティを指定できます。  

|property|説明|
|---|---|
|`type`|`<input>`要素の`type`属性を指定します。|
|`classList`|ダイアログの要素の`class`を指定します。|
|`helperText`|ヘルパーテキストを指定します。関数を指定することもできます。|
|`validator`|入力値確定前のvalidation関数を指定します。エラーがある場合は関数でメッセージ文字列を返してください。|
|`inputValidator`|`<input>`の入力値のvalidation関数を指定します。エラーがある場合は関数でメッセージ文字列を返してください。|
{{else}}
### Properties
The following properties can be set with the constructor argument of `SmallDialogInputEditor`.

|property|descrition|
|---|---|
|`type`|Specify the `type` attribute of the `<input>` element.|
|`classList`|Specify `class` of the dialog element.|
|`helperText`|Specify helper text. You can also specify a function.|
|`validator`|Specify the validation function to be call before confirming the input value. If there is an error, please use the function to return the message.|
|`inputValidator`|Specify the validation function of the value of `<input>`. If there is an error, please use the function to return the message.|
{{/if}}

{{/marked}}

<div id="sample2" class="demo-grid small">
</div>
<script type="text/javascript">
/*eslint no-alert:0*/
//{{#wrapscript}}
//{{#copy "sample2"}}
/*global cheetahGrid*/

const grid = new cheetahGrid.ListGrid({
	parentElement: document.querySelector('#sample2'),
	header: [
		{
			field: 'number',
			caption: 'type & classList',
			width: 220,
			columnType: 'number',
			action: new cheetahGrid.columns.action.SmallDialogInputEditor({
				type: 'number',
				classList: ['al-right']
			})
		},
		{
			field: 'text',
			caption: 'validator & helperText',
			width: 220,
			action: new cheetahGrid.columns.action.SmallDialogInputEditor({
				classList: 'helper-text--right-justified',
				helperText(value) {
					return `${value.length}/20`;
				},
				inputValidator(value) {
					return value.length > 20 ? `over the max length. ${value.length}` : null;
				},
				validator(value) {
					return value.match(/^[a-zA-Z]*$/) ? null : 'Please only alphabet.';
				}
			})
		},
		{
			field: 'code',
			caption: 'async validator',
			width: 220,
			action: new cheetahGrid.columns.action.SmallDialogInputEditor({
				helperText: 'enter code. /^[A-Z]\\d{3}$/',
				validator(value) {
					return new Promise((r) => {
						setTimeout(() => {
							r(value.match(/^[A-Z]\d{3}$/) ? null : 'Invalid code.');
						}, 500);
					});
				}
			})
		},
		{
			caption: 'show',
			width: 100,
			columnType: new cheetahGrid.columns.type.ButtonColumn({
				caption: 'SHOW',
			}),
			action: new cheetahGrid.columns.action.ButtonAction({
				action(rec) {
					alert(JSON.stringify(rec, null, '  '));
				},
			}),
		}


	],
});
grid.records = [
	{number: 1234, text: 'a', code: 'A001'},
	{number: 1234.123, text: 'b', code: 'A002'},
	{number: -1234.123, text: 'c', code: 'A003'},
];
//{{/copy}}
//{{/wrapscript}}
</script>
{{#marked}}

```css
    .al-right input {
    	text-align: right;
    }
```

{{/marked}}
{{> code class="js" code=sample2}}