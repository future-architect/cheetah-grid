---
category:
    - Usage
    - Column Actions
    - Classes
title: InlineMenuEditor
layout: demo.hbs
order: 500
docVersion: 0.2.0
css: >
    .al-right {
    	text-align: right;
    }
---

{{#marked}}
## InlineMenuEditor

{{#if lang_ja}}
メニュー選択によるデータ編集を可能にします。 
{{else}}
Enables data editing by menu selection.
{{/if}} 

{{/marked}}

<div id="sample1" class="demo-grid small">
</div>

<label>change action properties : </label>
<select id="sample1mode">
    <option value="" selected="true">both false</option>
    <option value="readOnly">readOnly = true</option>
    <option value="disabled">disabled = true</option>
</select> <span id="sample1modememo"></span>

<script type="text/javascript">
/*eslint no-alert:0*/
//{{#wrapscript}}
//{{#copy "sample1"}}
/*global cheetahGrid*/

const menuOptions = [
	{value: '', caption: 'Empty'},
	{value: '1', caption: 'Option 1'},
	{value: '2', caption: 'Option 2'},
	{value: '3', caption: 'Option 3'},
	{value: '4', caption: 'Option 4'},
	{value: '5', caption: 'Option 5'},
	{value: '6', caption: 'Option 6'},
	{value: '7', caption: 'Option 7'},
];
const displayOptions = [
	{value: '', caption: 'Choose your option'},
	{value: '1', caption: 'Option 1'},
	{value: '2', caption: 'Option 2'},
	{value: '3', caption: 'Option 3'},
	{value: '4', caption: 'Option 4'},
	{value: '5', caption: 'Option 5'},
	{value: '6', caption: 'Option 6'},
	{value: '7', caption: 'Option 7'},
];
const menuEditor = new cheetahGrid.columns.action.InlineMenuEditor({options: menuOptions});
const grid = new cheetahGrid.ListGrid({
	parentElement: document.querySelector('#sample1'),
	header: [
		{
			field: 'sel',
			caption: 'InlineMenuEditor',
			width: 260,
			columnType: new cheetahGrid.columns.type.MenuColumn({options: displayOptions}),
			action: new cheetahGrid.columns.action.InlineMenuEditor({options: menuOptions}),
		},
		{
			field: 'sel2',
			caption: 'controlable properties',
			width: 260,
			columnType: new cheetahGrid.columns.type.MenuColumn({options: displayOptions}),
			action: menuEditor,
		},

		{
			caption: 'show',
			width: 100,
			columnType: new cheetahGrid.columns.type.ButtonColumn({
				caption: 'SHOW',
			}),
			action: new cheetahGrid.columns.action.ButtonAction({
				action(rec) {
					alert(JSON.stringify(rec, null, '  '));
				},
			}),
		}


	],
});
grid.records = [
	{sel: '', sel2: ''},
	{sel: '1', sel2: '1'},
	{sel: '2', sel2: '2'},
	{sel: '3', sel2: '3'},
	{sel: '', sel2: ''},
	{sel: '1', sel2: '1'},
	{sel: '2', sel2: '2'},
	{sel: '3', sel2: '3'},
	{sel: '', sel2: ''},
	{sel: '1', sel2: '1'},
	{sel: '2', sel2: '2'},
	{sel: '3', sel2: '3'},
];
document.querySelector('#sample1mode').onchange = function() {
	//change action properties
	if (this.value === 'readOnly') {
		menuEditor.readOnly = true;
		menuEditor.disabled = false;
		document.querySelector('#sample1modememo').textContent = 'It will not toggle';
	} else if (this.value === 'disabled') {
		menuEditor.readOnly = false;
		menuEditor.disabled = true;
		document.querySelector('#sample1modememo').textContent = 'It will not toggle and does not respond when hovering the mouse';
	} else {
		menuEditor.readOnly = false;
		menuEditor.disabled = false;
		document.querySelector('#sample1modememo').textContent = 'both false';
	}
};
//{{/copy}}
//{{/wrapscript}}
</script>
{{> code class="js" code=sample1}}

